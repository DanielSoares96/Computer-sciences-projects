import java_cup.runtime.*;


action code {:
  // cria uma instancia da maquina
  
  CIMS maquina = new CIMS();
:} ;

parser code {:
  Yylex lexer;

  public void report_error(String message, Object error_info) {
    Symbol info = (Symbol) error_info;

    System.err.print("** " + message);
    System.err.println(" at `" + info.value + "' in position " + info.left
		       + " **");
  }

  public void report_fatal_error(String message, Object _) {
    System.err.println("** " + message);
  }
:} ;

init with {: lexer = new Yylex(System.in); :} ;

scan with {: return lexer.yylex(); :} ;

terminal        CHAMA, LOCAIS, REGRESSA, COLOCA_ARG ;
terminal        EMPILHA_VAR, EMPILHA_ARG, EMPILHA, ATRIBUI_VAR, ATRIBUI_ARG ;
terminal        SOMA, SUB, MULT, DIV ;
terminal        SIGUAL, SMENOR, SALTA ;
terminal        ESCREVE_INT, ESCREVE_STR, MUDA_LINHA ;
terminal String IDENTIFICADOR ;
terminal String	INTEIRO, STRING ;
terminal        DOIS_PONTOS;
terminal	ERRO ;

non terminal CIMS programa ;
non terminal      etiqueta, instrucao ;

programa ::= programa etiqueta instrucao	{: RESULT = maquina; :}
         |
	 ;
etiqueta ::= IDENTIFICADOR:e DOIS_PONTOS	{: maquina.posicoes.put(e,maquina.getMem().size()); :}
	 |
	 ;
instrucao ::= CHAMA INTEIRO:d IDENTIFICADOR:p 	{: maquina.getMem().add(new Chama(d,p)); :}
	  |   LOCAIS INTEIRO:a INTEIRO:v 	{: maquina.getMem().add(new Locais(a,v)); :}
	  |   REGRESSA 				{: maquina.getMem().add(new Regressa()); :}
	  |   COLOCA_ARG INTEIRO:n 		{: maquina.getMem().add(new ColocaArg(n)); :}
	  |   EMPILHA_VAR INTEIRO:d INTEIRO:n 	{: maquina.getMem().add(new EmpilhaVar(d,n)); :}
	  |   EMPILHA_ARG INTEIRO:d INTEIRO:n 	{: maquina.getMem().add(new EmpilhaArg(d,n)); :}
	  |   EMPILHA INTEIRO:i 		{: maquina.getMem().add(new EmpilhaInt(i)); :}
	  |   ATRIBUI_VAR INTEIRO:d INTEIRO:n 	{: maquina.getMem().add(new AtribuiVar(d,n)); :}
	  |   ATRIBUI_ARG INTEIRO:d INTEIRO:n 	{: maquina.getMem().add(new AtribuiArg(d,n)); :}
	  |   SOMA 				{: maquina.getMem().add(new Add()); :}
	  |   SUB				{: maquina.getMem().add(new Sub()); :}
	  |   MULT				{: maquina.getMem().add(new Mult());:}
	  |   DIV				{: maquina.getMem().add(new Div()); :}
	  |   SIGUAL IDENTIFICADOR:e 		{: maquina.getMem().add(new SaltoIgual(e)); :}
	  |   SMENOR IDENTIFICADOR:e 		{: maquina.getMem().add(new SaltoMenor(e)); :}
	  |   SALTA IDENTIFICADOR:e 		{: maquina.getMem().add(new SaltoInst(e)); :}
	  |   ESCREVE_INT 			{: maquina.getMem().add(new EscreveInt()); :}
	  |   ESCREVE_STR STRING:s 		{: maquina.getMem().add(new EscreveString(s)); :}
	  |   MUDA_LINHA  			{: maquina.getMem().add(new MudaLinha()); :}
	  ;
